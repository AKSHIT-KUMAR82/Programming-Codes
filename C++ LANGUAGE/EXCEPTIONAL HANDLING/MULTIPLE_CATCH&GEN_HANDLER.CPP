/* NOW , HERE WE ARE GOING TO DISCUSS ABOUT THE USECASE OF MULTIPLE CATCH HANDLERS AND GERNERIC 
CATCH HANDLER...
WHEN WE WANT TO SPECIFY PARTICULAR MESSAGE FOR A TYPE OF EXCEPTION THEN WE CAN MAKE
MULTIPLE CATCH HANDLERS FOR SPECIFIC TYPE OF THROWN OBJECT LIKE SWITCH CASES BUT 
IN CASE WE DON'T KNOW THE EXACT TYPE OF THE EXCEPTION THROWN THEN WE CAN MAKE THE 
GENERIC HANDLER ( I.E CATCH(...)) WHICH CAN RESPONDS TO ANY TYPE OF OBJECT THROWN BY THE 
TRY BLOCK AND SHOWS APPROPRIATE MESSAGE SO, IT'S A GOOD PRACTICE TO USE IT AS A DEFAULT 
HANDLER SO THAT WHENEVER A DIFFERENT TYPE OF OBJECT EXCEPTION IS THROWN THAT WILL NOT 
MATCHES WITH THE LIST OF HANDLERS THEN AT LAST DEAFULT HANDLER WILL BE THERE TO HANDLE ITT.. */

#include<iostream>
using namespace std;

void divide(int x)
{
    //HERE WE HAVE DIFFERENT CONDITION FOR DIFFERENT EXCEPTION, SO MULTIPLE HANDLERS WILL BE USED TO HANDLE IT..
    if(x==0)
      throw x;
    else if(x==1)
      throw 'x';
    else if(x==2)
      throw (float)x;
    else
      throw (double)x;
    cout<<"END OF FUNCTION...";
}

int main()
{
    int x;
    cout<<"ENTER THE VALUE : ";
    cin>>x;
    try
    {
        divide(x);
    }
    catch(int x)
    {
        cout<<"AN INTEGER IS CAUGHT...\n";
    }
    catch(char x)
    {
        cout<<"A CHARACTER IS CAUGHT...\n";
    }
    catch(float x)
    {
        cout<<"A FLOATING VALUE IS CAUGHT...\n";
    }
    catch(...) //GENERIC HANDLER 
    {
        cout<<"AN EXCEPTION IS CAUGHT...\n";
    }
    /* ONE POINT MUST ME REMEMBER THAT WHEN THROW OBJECT EXCEPTION TYPE WILL NOT MATCHES 
ANY HANDLER ARGUMENT TYPE THEN TERMINATE() FUNCTION IS CALLED IMPLICITLY BY THE COMPILER
TO TERMINATE THE PROGRAM AT THAT POINT....BUT GENERIC HANDLER HELPS US TO HANDLE ITT...*/
    cout<<"END OF MAIN...\n";
    return 0;
}
